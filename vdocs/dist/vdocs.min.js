'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;


    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.propsIterator = propsIterator;
exports.defaultIterator = defaultIterator;
exports.createJsonFile = createJsonFile;
exports.createMarkdownFile = createMarkdownFile;
exports.createMarkdownContent = createMarkdownContent;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

var outputDirectory = './docs/components';

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(filename, mdContent) {
    // console.log(content);
    try {
        _fs2.default.writeFileSync(outputDirectory + '/' + filename, mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(content) {
    // console.log(content);
    try {
        _fsExtra2.default.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    console.log('USING NEW config.navDir: ', config.jsonDir);
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    // let content = ``;
    for (var propKey in obj) {

        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    // let content = ``;
    for (var propKey in obj) {
        var info = obj[propKey];
        return '\n- `' + propKey + '`\n' + info.description + '\n\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    // let content = ``;
    for (var propKey in obj) {
        var info = obj[propKey];
        return '\n- `' + propKey + '`\n' + info.description + '\n\n';
    }
    // return content
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '- `' + prop + '` ***' + type.name.capitalize() + '***\n    \n    ' + description + '\n\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    // let content = ``;
    for (var propKey in obj) {
        var info = obj[propKey];
        return '\n- `' + propKey + '`\n' + info.description + '\n';
    }
    // return content
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    // let propsContent = ``;
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        return '\n        - `' + prop + '` ***' + type.name.capitalize() + '***\n        ' + description + '\n        ';
    }
    // return propsContent
}

function defaultIterator(obj) {
    // let content = ``;
    for (var propKey in obj) {
        var info = obj[propKey];
        return '\n- `' + propKey + '`\n' + info.description + '\n';
    }
    // return content
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n        - `' + prop + '` ***' + type.name.capitalize() + '***\n        ' + description + '\n        ';
    }
    return propsContent;
}

function defaultIterator(obj) {
    // let content = ``;
    for (var propKey in obj) {
        var info = obj[propKey];
        return '\n- `' + propKey + '`\n' + info.description + '\n';
    }
    // return content
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n' + description + '\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n' + info.description + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n' + description + '\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Methods\n\n' + defaultIterator(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

// const itemAndDecription = (item) => {

// }

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsIterator(methods) {
    methods.map(function (method) {
        return '\n        - `' + method.name + '`\n\n        ' + method.description + '      \n        ';
    });
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Methods\n\n' + methodsIterator(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

// const itemAndDecription = (item) => {

// }

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsIterator(methods) {
    return methods.map(function (method) {
        return '\n        - `' + method.name + '`\n\n        ' + method.description + '      \n        ';
    });
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Methods\n\n' + methodsIterator(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsIterator(methods) {
    if (!methods) return;
    return '\n## Methods\n' + methodsList(methods) + '\n';
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Methods\n\n' + methodsIterator(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsIterator(methods) {
    if (methods.length < 0) return;
    return '\n## Methods\n' + methodsList(methods) + '\n';
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Methods\n\n' + methodsIterator(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsIterator(methods) {
    if (methods.length < 0) return;
    return '\n## Methods\n';
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Methods\n\n' + methodsIterator(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsIterator(methods) {
    if (methods.length < 0) return;
    return '\n## NEWW NAME\n';
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Methods\n\n' + methodsIterator(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsIterator(methods) {
    if (methods.length < 0) '';else {
        return '\n        ## NEWW NAME\n        ';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n## Methods\n\n' + methodsIterator(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length < 0) '';else {
        return '\n## Methods - from methodsTemplate\n\n' + methodsList + '\n';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length < 0) '';else {
        return '\n## Methods - from methodsTemplate\n\n' + methodsList(methods) + '\n';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length < 0) return '';else if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n\n' + methodsList(methods) + '\n';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length < 0) return '';else if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n\n' + methodsList(methods) + '\n';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length < 0) '';else if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n\n' + methodsList(methods) + '\n';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return methods.map(function (method) {
        return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    // if (methods.length < 0 ) ''
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n\n' + methodsList(methods) + '\n';
    } else {
        return '';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(methodsList(method));
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    // if (methods.length < 0 ) ''
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else {
        return '';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var methodsList = function methodsList(methods) {
    return '\n- `' + method.name + '`\n\n' + method.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return methodsList(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    // if (methods.length < 0 ) ''
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else {
        return '';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    // if (methods.length < 0 ) ''
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else {
        return '';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    // if (methods.length < 0 ) ''
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else {
        return '';
    }
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    // if (methods.length < 0 ) ''
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else '';
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    // if (methods.length < 0 ) ''
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultIterator(obj) {
    var content = '';
    for (var propKey in obj) {
        var info = obj[propKey];
        content += '\n- `' + propKey + '`\n\n  ' + (info.description ? info.description : 'NO DESCRIPTION') + '\n';
    }
    return content;
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultIterator(obj) {
    var content = '';

    for (var propKey in obj) {
        var item = {
            name: propKey,
            description: obj[propKey]['description']
        };
        content += descriptionItem(item);
    }
    return content;
}

function defaultTemplate(obj) {
    // TODO
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '` **FROM DESCRIPTIONITEM FUNCTION**\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultIterator(obj) {
    var content = '';

    for (var propKey in obj) {
        var item = {
            name: propKey,
            description: obj[propKey]['description']
        };
        content += descriptionItem(item);
    }
    return content;
}

function defaultTemplate(obj) {
    // TODO
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '` **FROM DESCRIPTIONITEM FUNCTION**\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultIterator(obj) {
    if (!obj) {
        return 'NO PROPERTIES';
    }
    var content = '';

    for (var propKey in obj) {
        var item = {
            name: propKey,
            description: obj[propKey]['description']
        };
        content += descriptionItem(item);
    }
    return content;
}

function defaultTemplate(obj) {}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '` **FROM DESCRIPTIONITEM FUNCTION**\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultIterator(obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '';

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function defaultTemplate(obj) {}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '` **FROM DESCRIPTIONITEM FUNCTION**\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultIterator(obj) {
    if (isEmptyObj(obj)) return 'EMPTY OBJECT';else {
        var content = '';

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function defaultTemplate(obj) {}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n## Slots\n\n' + defaultIterator(slots) + '\n\n## Events\n\n' + defaultIterator(events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '` **FROM DESCRIPTIONITEM FUNCTION**\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods - from methodsTemplate\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '*** - ' + (obj[prop]['defaultValue'] ? obj[prop]['defaultValue']['value'] : '') + '\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '*** - ' + (obj[prop]['defaultValue'] ? obj[prop]['defaultValue']['value'] : '') + '\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n  ' + description + '\n  ' + (obj[prop]['defaultValue'] ? 'Default:  ' + obj[prop]['defaultValue']['value'] : '') + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` *' + type.name.capitalize() + '*\n\n  ' + description + '\n\n  ' + (obj[prop]['defaultValue'] ? '**Default:**  ' + obj[prop]['defaultValue']['value'] : '') + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;

    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;

String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _vueDocgenApi = require('vue-docgen-api');

var vueDocs = _interopRequireWildcard(_vueDocgenApi);

var _readdirp = require('readdirp');

var _readdirp2 = _interopRequireDefault(_readdirp);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function isEmptyObj(obj) {
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) return false;
    }
    return true;
}

var descriptionItem = function descriptionItem(item) {
    return '\n- `' + item.name + '`\n\n  ' + item.description + '      \n';
};

var methodsIterator = function methodsIterator(methods) {
    return methods.map(function (method) {
        return descriptionItem(method);
    });
};

// SAVE FOR LATER
// ${obj[prop]['defaultValue'] ? '**Default: **  ' + obj[prop]['defaultValue']['value'] : ''}

function propsIterator(obj) {
    var propsContent = '';
    for (var prop in obj) {
        var _obj$prop = obj[prop],
            description = _obj$prop.description,
            type = _obj$prop.type;

        propsContent += '\n- `' + prop + '` ***' + type.name.capitalize() + '***\n\n  ' + description + '\n';
    }
    return propsContent;
}

function methodsTemplate(methods) {
    if (methods.length > 0) {
        return '\n## Methods\n' + methodsIterator(methods) + '\n';
    } else return '';
}

function defaultTemplate(title, obj) {
    if (isEmptyObj(obj)) return '';else {
        var content = '## ' + title;

        for (var propKey in obj) {
            var item = {
                name: propKey,
                description: obj[propKey]['description']
            };
            content += descriptionItem(item);
        }
        return content;
    }
}

function createJsonFile(config, filename, content) {
    // console.log(content);
    try {
        // fs.writeFileSync("OUTPUT.json", JSON.stringify(content), "utf8");
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/documentation.json', JSON.stringify(content), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownFile(config, filename, mdContent) {
    console.log(config.docsDir);
    try {
        _fsExtra2.default.outputFileSync(config.docsDir + '/' + filename + '/README.md', mdContent, "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

function createMarkdownContent(content) {
    var displayName = content.displayName,
        description = content.description,
        props = content.props,
        events = content.events,
        methods = content.methods,
        slots = content.slots;


    var mdDocContent = '\n# ' + displayName + '\n' + description + '\n\n## Props\n\n' + propsIterator(props) + '\n\n' + defaultTemplate('Slots', slots) + '\n\n' + defaultTemplate('Events', events) + '\n\n' + methodsTemplate(methods) + '\n';
    return mdDocContent;
}

function createComponentsNavFile(config, navArray) {
    var fileName = 'components-nav.json';
    try {
        _fsExtra2.default.outputFileSync(config.jsonDir + '/' + fileName, JSON.stringify(navArray), "utf8");
    } catch (e) {
        console.log("Cannot write file ", e);
    }
}

var init = function init() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var componentsDir = config.componentsDir,
        outputDir = config.outputDir;

    var readDirSettings = {
        root: _path2.default.resolve(componentsDir),
        entryType: 'all'
    };
    console.log('root: ', readDirSettings.root);

    var componentsNavArray = [];

    (0, _readdirp2.default)(readDirSettings).on('data', function (entry) {
        var name = entry.name,
            path = entry.path;
        // execute everytime a file is found in the providen directory

        if (entry.name.endsWith('.vue')) {
            var mdFileName = name.replace('.vue', '');
            var componentInfo = vueDocs.parse(readDirSettings.root + '/' + path);
            var mdContent = createMarkdownContent(componentInfo);

            createJsonFile(config, mdFileName, componentInfo);
            createMarkdownFile(config, mdFileName, mdContent);
            componentsNavArray.push('/components/' + mdFileName + '/');
        }
    }).on('warn', function (warn) {
        console.log("Warn: ", warn);
    }).on('error', function (err) {
        console.log("Error: ", err);
    }).on('end', function () {
        createComponentsNavFile(config, componentsNavArray);
    });
    // In this example, this variable will store all the paths of the files and directories inside the providen path
};

exports.init = init;
exports.default = init;


String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
